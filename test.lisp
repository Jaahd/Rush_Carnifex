(defstruct cell (gen 0) (life 0))

(defun neighbours (grid x y height width)
  (cond ((and (= x  0) (= y 0)) (+ 
                                  (cell-gen (aref grid x  y))
                                  (cell-gen (aref grid (+ x 1) y))
                                  (cell-gen (aref grid x (+ y 1)))
                                  (cell-gen (aref grid (+ x 1) (+ y 1)))
                                  ))
        ((and (= x  width) (= y height)) (+ 
                                           (cell-gen (aref grid x  y))
                                           (cell-gen (aref grid (- x 1) y))
                                           (cell-gen (aref grid x (- y 1)))
                                           (cell-gen (aref grid (- x 1) (- y 1)))
                                           ))
        ((= x  0) (+ 
                    (cell-gen (aref grid x  y))
                    (cell-gen (aref grid (+ x 1) y))
                    (cell-gen (aref grid x (+ y 1)))
                    (cell-gen (aref grid x (- y 1)))
                    (cell-gen (aref grid (+ x 1) (+ y 1)))
                    (cell-gen (aref grid (+ x 1) (- y 1)))
                    ))
        ((= y  0) (+ 
                    (cell-gen (aref grid x  y))
                    (cell-gen (aref grid (+ x 1) y))
                    (cell-gen (aref grid (- x 1) y))
                    (cell-gen (aref grid x (+ y 1)))
                    (cell-gen (aref grid (+ x 1) (+ y 1)))
                    (cell-gen (aref grid (- x 1) (+ y 1)))
                    ))
        ((= x  width) (+ 
                        (cell-gen (aref grid x  y))
                        (cell-gen (aref grid (- x 1) y))
                        (cell-gen (aref grid x (+ y 1)))
                        (cell-gen (aref grid x (- y 1)))
                        (cell-gen (aref grid (- x 1) (- y 1)))
                        (cell-gen (aref grid (- x 1) (+ y 1)))
                        ))
        ((= y  height) (+ 
                         (cell-gen (aref grid x  y))
                         (cell-gen (aref grid (+ x 1) y))
                         (cell-gen (aref grid (- x 1) y))
                         (cell-gen (aref grid x (- y 1)))
                         (cell-gen (aref grid (- x 1) (- y 1)))
                         (cell-gen (aref grid (+ x 1) (- y 1)))
                         ))
        (t (+
             (cell-gen (aref grid x  y))
             (cell-gen (aref grid (+ x 1) y))
             (cell-gen (aref grid (- x 1) y))
             (cell-gen (aref grid x (+ y 1)))
             (cell-gen (aref grid x (- y 1)))
             (cell-gen (aref grid (+ x 1) (+ y 1)))
             (cell-gen (aref grid (- x 1) (- y 1)))
             (cell-gen (aref grid (+ x 1) (- y 1)))
             (cell-gen (aref grid (- x 1) (+ y 1)))
             ))
        )
  )

(defun check_neighbours (grid x y height width)
  (format t "x: ~a; y: ~a; width: ~a; hwight: ~a~%" x y width height)
      (setf (cell-life (aref grid x y)) (neighbours grid x y height width))
  )

(defun print_grid_life (grid height width)
  (write-line "life")
  (dotimes (x width)
    (dotimes (y height)
      (write (cell-life (aref grid x y)))
      (format t " ")
      )
    (write-line "")
    )
  )

(defun print_grid_gen (grid height width)
  (write-line "gen")
  (dotimes (x width)
    (dotimes (y height)
      (write (cell-gen (aref grid x y)))
      (format t " ")
      )
    (write-line "")
    )
  )

(defun swap_life_gen (grid height width)
  (write-line "swap")
  (dotimes (x width)
    (dotimes (y height)
      (if (or (= (cell-life (aref grid x y)) 3) (= (cell-life (aref grid x y)) 4))
        (setf (cell-gen (aref grid x y)) 1)
        (setf (cell-gen (aref grid x y)) 0)
        ))
    )
  )

(defun create-table (lines columns)
  (let ((grid (make-array `(,lines ,columns))))
    (dotimes (x lines)
      (dotimes (y columns)
        (setf (aref grid x y) (make-cell))
        )
      )
    (setf (cell-gen (aref grid 4 5)) 1)
    (setf (cell-gen (aref grid 5 6)) 1)
    (setf (cell-gen (aref grid 6 6)) 1)
    (setf (cell-gen (aref grid 6 5)) 1)
    (setf (cell-gen (aref grid 6 4)) 1)
    (setf (cell-gen (aref grid 9 9)) 1)

    (print_grid_gen grid lines columns)
    (print_grid_life grid lines columns)

    (write-line "check")
    (loop for x from 0 to (- lines 1)
          do (loop for y from 0 to (- columns 1)
                   do (progn (print lines) (print columns)
                    (check_neighbours grid x y (- lines 1) (- columns 1)))
                   )
          )
;    (dotimes (x lines)
;      (dotimes (y columns)
;        (format t "~a ~a ~%" x y)
;        (check_neighbours grid x y 9 9)
;        )
;      )
    (print_grid_gen grid lines columns)
    (print_grid_life grid lines columns)
    (swap_life_gen grid lines columns)
    (print_grid_gen grid lines columns)
    (print_grid_life grid lines columns)
    )
  )

(create-table 10 10)
(exit)

; gen . live
; gen = 1 ou 0
; live = 0+ (= live_neighbours)
; t0 : grille de d√©part avec gen = live
; t1 : live = live_neighbours
; t2 : gen = 1 ou 0 en fonction de live


; x = width = columns
; y = height = lines
